/***
Copyright 2016 TJ Woon

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
***/
// Generated by CoffeeScript 1.10.0
(function() {
  var Touch;

  Touch = function(elt, conf) {
    var LONGTAP_DURATION, TAP_THRESHOLD, addEventListener, longtapTimer, removeEventListener, touches;
    if (conf == null) {
      conf = {};
    }
    TAP_THRESHOLD = conf.tapThreshold || 20;
    LONGTAP_DURATION = conf.longtapDuration || 200;
    touches = {};
    addEventListener = function(eventName, eventHandler, capture) {
      if (capture == null) {
        capture = false;
      }
      if (elt.addEventListener != null) {
        return elt.addEventListener(eventName, eventHandler, capture);
      } else if (elt.attachEvent != null) {
        return elt.attachEvent("on" + eventName, eventHandler);
      }
    };
    removeEventListener = function(eventName, eventHandler, capture) {
      if (capture == null) {
        capture = false;
      }
      if (elt.removeEventListener != null) {
        return elt.removeEventListener(eventName, eventHandler, capture);
      } else if (elt.detachEvent != null) {
        return elt.detachEvent("on" + eventName, eventHandler);
      }
    };
    longtapTimer = function(id) {
      return function() {
        var touch;
        if ((touch = touches[id]) != null) {
          delete touches[id];
          return $(touch.event.target).trigger("longtap", touch.event);
        }
      };
    };
    addEventListener("touchstart", function(evt) {
      return $.each(evt.changedTouches, function(i, touch) {
        var timeout;
        timeout = setTimeout(longtapTimer(touch.identifier), LONGTAP_DURATION);
        return touches[touch.identifier] = {
          longtapTimeoutId: timeout,
          event: touch,
          startX: touch.clientX,
          startY: touch.clientY
        };
      });
    });
    addEventListener("touchmove", function(evt) {
      return $.each(evt.changedTouches, function(i, touch) {
        var deltaX, deltaY, t;
        t = touches[touch.identifier];
        if (t != null) {
          t.event = touch;
          deltaX = Math.abs(touch.clientX - t.startX);
          deltaY = Math.abs(touch.clientY - t.startY);
          if (deltaX >= TAP_THRESHOLD || deltaY >= TAP_THRESHOLD) {
            return delete touches[touch.identifier];
          }
        }
      });
    });
    addEventListener("touchend", function(evt) {
      return $.each(evt.changedTouches, function(i, touch) {
        var t;
        t = touches[touch.identifier];
        if (t != null) {
          clearTimeout(t.longtapTimeoutId);
          delete touches[touch.identifier];
          return $(t.event.target).trigger("tap", touch);
        }
      });
    });
    addEventListener("touchcancel", function(evt) {
      return $.each(evt.changedTouches, function(i, touch) {
        var t;
        t = touches[touch.identifier];
        if (t != null) {
          clearTimeout(t.longtapTimeoutId);
          return delete touches[touch.identifier];
        }
      });
    });
    return void 0;
  };

  Touch.version = "1.0.1";

  $.fn.Touch = function(conf) {
    return this.each(function() {
      var t;
      t = $(this).data("Touch");
      if (t == null) {
        t = new Touch(this, conf);
        $(this).data("Touch", t);
      }
      return t;
    });
  };

  $.Touch = Touch;

}).call(this);
